2022-05-20  William A. Hudson

		sine_mcp4822 with LED Gate  2022-05-14
		--------------------------------------

Data notes from:  exciter/doc/sine_mcp4822.text
    See section:
    ## Experiment:  sine_mcp4822 with LED Gate  2022-05-14

----------------------------------------------------------------------------
## Analysis
----------------------------------------------------------------------------

This was first capture of an elliptical pattern with LED gate sync marks.
Want an initial analysis to see how it goes.

This is a full color, full frame capture.
Image is a vertical narrow ellipse, slightly tilted CCW, progressing CCW.
Sync marks have jitter, since NperCycle = 39.9976 is not integer.

    % ll
    -r--r--r-- 1 wah wah 352702 Apr 23 17:43 sine_509Hz_a.jpg

    % file sine_509Hz_a.jpg
    sine_509Hz_a.jpg: JPEG image data, Exif standard: [TIFF image data, \
    big-endian, direntries=10, height=0, manufacturer=RaspberryPi, \
    model=RP_imx477, xresolution=156, yresolution=164, resolutionunit=2, \
    datetime=2022:04:23 17:40:42, width=0], baseline, precision 8, \
    4056x3040, frames 3

    % djpeg -grayscale sine_509Hz_a.jpg | pgm_box
	Ncol   = 4056
	Nrow   = 3040
	Npix   = 12330240
	MaxVal = 255
	Max    = 213
	Min    = 0
	Mean   = 0.102422
	SD     = 2.36297
	CGxy   = 2072, 1683
	  Bounding Box Y:
	YmaxMean = 68
	YminMean = 0
	YhalfMax = 34
	Ytop     = 1273
	Ybot     = 2070
	Yfwhm    = 797
	  Bounding Box X:
	XmaxMean = 47
	XminMean = 0
	XhalfMax = 23
	Xleft    = 1994
	Xright   = 2175
	Xfwhm    = 181

    % display sine_509Hz_a.jpg

    % jpegtran -crop 1200x1200+1500+1100 sine_509Hz_a.jpg > color_crop.jpg
    % jpegtran -grayscale -crop 1200x1200+1500+1100 sine_509Hz_a.jpg > crop.jpg

    Note jpegtran made two different image size crop files:
	1212x1212  color_crop.jpg
	1204x1204  crop.jpg

    Use djpeg on color_crop.jpg for uniformity.

    % ll
    -rw-rw-r-- 1 wah wah  67806 May 20 09:08 color_crop.jpg
    -rw-rw-r-- 1 wah wah  41336 May 20 09:08 crop.jpg

    % djpeg -grayscale color_crop.jpg | pgm_box
	Ncol   = 1212
	Nrow   = 1212
	Npix   = 1468944
	MaxVal = 255
	Max    = 213
	Min    = 0
	Mean   = 0.851165
	SD     = 6.79876
	CGxy   = 600, 597
	  Bounding Box Y:
	YmaxMean = 68
	YminMean = 0
	YhalfMax = 34
	Ytop     = 185
	Ybot     = 982
	Yfwhm    = 797
	  Bounding Box X:
	XmaxMean = 47
	XminMean = 0
	XhalfMax = 23
	Xleft    = 506
	Xright   = 687
	Xfwhm    = 181

The color image is more pleasant to view, and color changes from red toward
yellow as saturation is reached.
The CGxy looks pretty good, with only perturbation from the 1/8 sync mark.

Pick points by hand:
    % display color_crop.jpg &
	Image Edit -> Draw

    Points picked on trace center:  pixel coordinate (x,y)
	523,190  Ytop
	667,979  Ybot
	507,279  Xleft, affected by dark sync mark
	684,878  Xright

    Sync marks picked in center of the mark:
	507,241  zero crossing
	529,485  1/8 cycle
	683,924  1/2 cycle
	This ellipse is traced CCW.

    % djpeg -grayscale color_crop.jpg | pgm_swatch --geo=30x1000+505+150 | less
	View of ellipse upper tip and part of zero crossing sync mark.

    % djpeg -grayscale color_crop.jpg | pgm_swatch --geo=30x1000+667+150 | less
	View of ellipse lower tip and part of 1/2 cycle sync mark.
	Has maximum pixel, Max=213
	Sync mark has a distinct saddle shape, looks easy to numerically find.

    % djpeg -grayscale color_crop.jpg | pgm_swatch --geo=30x1000+495+150 | less
	View of ellipse zero cycle sync mark.

    % djpeg -grayscale color_crop.jpg | pgm_swatch --geo=30x1000+515+150 | less
	View of ellipse 1/8 cycle sync mark.

Now the task is to identify the parameters of the response sinusoids (ellipse)
wrt the drive sinusoid.

Draw axis on the image:  (using ImageMagic 'display' tool)

    X-axis (horizontal) at Y = (Ytop + Ybot) / 2    = 583
    Y-axis (vertical)   at X = (Xleft + Xright) / 2 = 596
	This does not look centered.  Bounding box is perturbed by sync marks.

    Put axis at CGxy = (600, 597)  - I missed at x=599 instead of 600
    Label axis crossing points {a,b,c,d}, progressing CCW from +X in the
	    ellipse coordinates (i.e. +Y up).
    Pick zero crossings of axes:  (x,y) image coordinates
	+X a:  647,597
	-X c:  547,597	delta_x = 100
	+Y b:  599,375
	-Y d:  599,827	delta_y = 452

	Note +Y is down in image coordinates.

 >  Save modified image file:  color_crop_axis.jpg
	Note:  I re-did the image edit with axis at (599,597), since the
	original had multiple lines from playing with the draw tool.
	Also it seems the X position is one less than indicated during drawing.
	Saving at JPEG quality 75 gives a much smaller file than the original.
	-rw-rw-r-- 1 wah wah  67806 May 20 09:08 color_crop.jpg
	-rw-rw-r-- 1 wah wah  18054 May 30 14:43 color_crop_axis.jpg

Translate image coordinates into ellipse coordinates:
    Image:    +X to the right, +Y down	(Ximage,Yimage)
    Ellipse:  +X to the right, +Y up	(X,Y)

	X =  (Ximage - Xi)    =  (Ximage - 597)
	Y = -(Yimage - Yi)    = -(Yimage - 601)
    where
	(Xi,Yi) = center of ellipse in image coordinates
	Xi = (Xia + Xic) / 2  = (647 + 547) / 2  = 597
	Yi = (Yid + Yib) / 2  = (827 + 375) / 2  = 601

	    >> Use this ellipse origin (597,601) for consistency.
	    It is close to the CGxy coordinates (600,597), within +-4 pixels.
    so now

	+X:  Xa = 647 - 597  = +50		Ya = 0
	-X:  Xc = 547 - 597  = -50		Yc = 0

	+Y:  Yb = -(375 - 601)  = +226		Xb = 0
	-Y:  Yd = -(827 - 601)  = -226		Xd = 0

		image    ellipse
	+X a:  647,597   +50, 0
	-X c:  547,597   -50, 0
	+Y b:  599,375     0, +226
	-Y d:  599,827     0, -226

	    These should be symmetric, since the origin is chosen from them.

Parametric representation of ellipse:  (ellipse coordinates)
    (1)
	x = Ex * cos( u )
	y = Ey * cos( u + Pd )

    where
	u      = parameter 0 <= u <= 2*Pi
	Pd     = phase difference to Y from X, radians
	2 * Ex = X amplitude, bounding width
	2 * Ey = Y amplitude, bounding height

    thus from pgm_box above:
	Ex = Xfwhm / 2  = 181 / 2  =  90
	Ey = Yfwhm / 2  = 797 / 2  = 398

    For point (x,y), from eq (1):
    (2)
	Ux = arccos( x / Ex )
	Ux = arccos( y / Ey ) - Pd

    (3)
	Pd = arccos( y / Ey ) - Ux

    So now the 4 axis crossings are:

	+X a:  +50, 0
	-X c:  -50, 0
	+Y b:    0, +226
	-Y d:    0, -226

	Uxa = arccos( +50 / 90 )  = 0.982		 56.2 deg
	Uxc = arccos( -50 / 90 )  = 2.160		123.7 deg
	Uxb = arccos(   0 / 90 )  = 1.571		 90.0 deg
	Uxd = arccos(   0 / 90 )  = 1.571		 90.0 deg

	Pda = arccos(    0 / 398 ) - 0.982  = +0.589	 +33.8 deg
	Pdc = arccos(    0 / 398 ) - 2.160  = -0.589	 -33.8 deg
	Pdb = arccos( +226 / 398 ) - 1.571  = -0.604	 -34.6 deg
	Pdd = arccos( -226 / 398 ) - 1.571  = +0.604	 +34.6 deg

	"These are not the droids we are looking for" [Star Wars].
	We expect Uxa .. Uxd to progress around the ellipse, and that
	Pd = constant, not quite what we see here.
	We also expect that the zero crossings are related by
	    Uxc = Uxa + Pi
	    Uyd = Uyb + Pi

	See:  lissajous/exp/ex2022_05_22_ellipse/notes.text
	See:  Ellipse Modeling below

	Our situation has more constraints that are not embodied in the
	simple solution given in eq (2).  The arc-cosine is multi-valued.

Constraints:

    The generation of the ellipse is give by eq (1) repeated here:
	x = Ex * cos( u )
	y = Ey * cos( u + Pd )

    We label the axis zero crossing such that:
	Xc <= 0 <= Xa
	Yd <= 0 <= Yb

    We require the values of u for each zero crossing {Ua, Ub, Uc, Ud}
	be monotonic increasing, and span a range <= 2*Pi.
	i.e. We have real sinusoid signals generating the ellipse.

    We require the phase difference Pd to be constant for all values
	of u.  i.e. The sinusoids on X and Y be constant frequency and
	have a constant phase relationship.

    We require the circulation direction of u around the ellipse to
	match the original image.  e.g. As u increases, the point on the
	ellipse progresses CCW in this image.

    We require the ellipse to have the same tilt orientation as in the
	original camera image.

    Note that we only care about u spanning a monotonic range of 2*Pi,
    since the physical model is continuous time waveforms.

    For this ellipse, circulation of parameter u is CCW, since the 1/8 cycle
    scan mark comes after the zero scan mark in that direction.
    The ellipse is oriented in the 2nd quadrant, i.e. tilted toward -45 degrees.
    [Quadrants number CCW, with 1 above +X and right of +Y.]

    The 4 axis crossings alone are not enough to specify a unique ellipse.
    These additional constraints hopefully make it unique and also dictate
    the ellipse orientation.

Apply constraints to zero crossings:

    From eq (1) we have:
    (4)  x / Ex = cos( u )
    (5)  y / Ey = cos( u + Pd )

	Ex = Xfwhm / 2  = 181 / 2  =  90
	Ey = Yfwhm / 2  = 797 / 2  = 398

	+X a:  +50, 0
	+Y b:    0, +226
	-X c:  -50, 0
	-Y d:    0, -226

    Find u from eq (4)
	+X a:   +50 / 90 =  0.556 = cos( Ua );  Ua = 0.982
	+Y b:     0 / 90 =  0.000 = cos( Ub );  Ub = 1.571
	-X c:   -50 / 90 = -0.556 = cos( Uc );  Uc = 4.124    (Ua + Pi)
	-Y d:     0 / 90 =  0.000 = cos( Ud );  Ud = 4.712    (Ub + Pi)

	Here we found Ua and Ub with arccos(), then add Pi to get Uc, Ud.
	Confirm that cos(u) indeed produces the correct value.
	Now we have u monotonic thru points a,b,c,d.

    Find Pd from eq (5)
	+X a:     0 / 398  =  0.000  = cos( 0.982 + Pd );  Pd = 3.731
	+Y b:  +226 / 398  =  0.568  = cos( 1.571 + Pd );  Pd = 3.746
	-X c:     0 / 398  =  0.000  = cos( 4.124 + Pd );  Pd = 3.731
	-Y d:  -226 / 398  = -0.568  = cos( 4.712 + Pd );  Pd = 3.746
						   Average Pd = 3.738

	This is the correct, consistent value for Pd, and agrees with
	the ellipse produced in Ellipse Modeling below.

	The typical arccos(y/Ey) gave an incorrect Pd = 0.60 which worked for
	points a,c,d, but not point b (wrong sign).  Essentially the ellipse
	was circulating CW (instead of CCW) and tilted into quadrant 1
	(instead of quadrant 2).  Adding Pi to Pd made all 4 points work as
	shown.

    Measurement uncertainties accumulate and show here as a variation
	in the calculation of Pd.
	The variation is:  3.746 - 3.731 = 0.015
	As a fraction of 2*Pi it is 0.24%
	Not too bad.

Find Sync Mark points:

    Translate image coordinates:  (as above)
	X =  (Ximage - Xi)    =  (Ximage - 597)
	Y = -(Yimage - Yi)    = -(Yimage - 601)

	Image    Sync mark		Ellipse (x,y)   Point
	-----    -------------		-------------   -----
	507,241  zero			-90,  360	(p)
	529,485  1/8 cycle		-68,  116	(q)
	683,924  1/2 cycle		 86, -323	(r)

    Plot our ellipse above, in R:
	Ex <-  90
	Ey <- 398
	Pd <- 3.738
	x <- Ex * cos( u )
	y <- Ey * cos( u + Pd )
	plot( x, y, col=cr, ylim=c(-L,L), xlim=c(-L,L) )
	plot( 90*cos(u), 398*cos(u + 3.738), col=cr, ylim=c(-L,L), xlim=c(-L,L) )
	abline( h=0 );  abline( v=0 )
	df <- data.frame( u, x, y )
 >	write.table( df, file="ellipse_p3.738.tab" )
 >	dev.copy2pdf( file="ellipse_p3.738.pdf" )

    Plot the drive/response waveforms in R:
	plot( u, 90*cos(u), col=cr, ylim=c(-L,L), xlab='u  (radian)', ylab='Amplitude (pixel)' )
	points( u, 398*cos(u+3.738), col=cr, ylim=c(-L,L) )
	points( u, - 100*sin(u - 3.048), col='red' )
	abline( v=Pi, h=0 )
	title( main='Ellipse XY waves' )
	text( 3.4, 300, "y = 398*cos(u+3.738)", pos=4 )
	text( 1.4, -120, "x = 90*cos(u)", pos=4 )
	text( 0.5, -300, "drive_Y = 100*sin(u - 3.048)", col='red', pos=4 )
 >	dev.copy2pdf( file="ellipse_wave.pdf" )

    Now lookup the sync (x,y) coordinates in the df table to find u:
	df
		    u             x          y
	1   0.0000000  9.000000e+01 -329.28882
	2   0.0628318  8.982241e+01 -314.60248  <
	3   0.1256636  8.929032e+01 -298.67455  <
	4   0.1884954  8.840586e+01 -281.56789  < 1/2 cycle (r)
	5   0.2513272  8.717249e+01 -263.35001  <
	6   0.3141590  8.559509e+01 -244.09281
	...
	48  2.9530946 -8.840581e+01  365.34497
	49  3.0159264 -8.929029e+01  354.71050  < zero (p)
	50  3.0787582 -8.982239e+01  342.67615  <
	51  3.1415900 -9.000000e+01  329.28942  <
	...
	61  3.7699080 -7.281170e+01  135.00433
	62  3.8327398 -6.934638e+01  111.22897  < 1/8 cycle (q)
	63  3.8955716 -6.560738e+01   87.01464
	...
	100 6.2203482  8.982238e+01 -342.67669

	Note both zero and 1/2 cycle are near ends of ellipse and so have
	more uncertainty in u.
	The 1/8 cycle point has less uncertainty, so use it to compute
	the other two points based on their known fraction of 2*Pi.

	Uq = 3.833
	Up = Uq - ((1/8) * 2 * Pi)  = 3.833 - 0.785  = 3.048
	Ur = Up + ((1/2) * 2 * Pi)  = 3.048 + 3.142  = 6.190

	Thus we have:
	    Up = 3.048  zero		(-89.6,  348.7)
	    Uq = 3.833  1/8 cycle	(-69.3,  111.1)
	    Ur = 6.190  1/2 cycle	( 89.6, -348.7)

	    This is reasonably close to the original picked points.

----------------------------------------------------------------------------
## Conclusions
----------------------------------------------------------------------------

Files:
------
    data -> ../../data/ex2022_04_23_sine_mcp4822/
	sine_509Hz_a.jpg	original camera image

    color_crop_axis.jpg		cropped image with axis drawn

    ellipse_p3.738.pdf		ellipse plot, Pd=3.738
    ellipse_p3.738.tab		ellipse table (i,u,x,y)

    ellipse_wave.pdf		ellipse drive/response waveforms

    notes.text			this file

Summary:
    The general process to identify the ellipse parameters is:

    1) Find the bounding box, i.e. extreme X and Y points on the ellipse.
	Compute the amplitudes Ex, Ey.

    2) Identify center of ellipse from the CG or the Bounding Box.
	Draw X and Y axis thru the center.
	Translate all image coordinates to these XY coordinates.

    3) Identify direction of circulation, i.e. CW or CCW, of the ellipse trace
	by looking at the zero and 1/8 cycle sync marks.

    4) Find zero crossing points on each axis, and order them by the direction
	of circulation.
	Compute Ua, Ub, Uc, Ud for each point from eq (4).
	For each point then compute Pd from eq (5).
	    (4)  x / Ex = cos( u )
	    (5)  y / Ey = cos( u + Pd )
	Choose u and Pd such that these equations are true, and u is ordered
	in direction of circulation.
	Perhaps use the average Pd value.

    5) Now Ex, Ey, and Pd are the parameters of the ellipse.

    6) Identify sync mark coordinates.
	Use eq (4,5) to find the value of u for each sync mark point.
	Now can relate phase of response to the phase of drive signal.

Conclusions:
    For this ellipse image, we found:
	Ex =    90 pixel    X amplitude
	Ey =   398 pixel    Y amplitude
	Pd = 3.738 radians  Phase difference of Y from X.
	Circulation is CCW.
	Up = 3.048 radians  Phase difference of drive signal from u=0.

    The exciter drive is in the Y-direction, and is a sine wave with rising
    zero crossing at the zero sync mark:
	 sin(u - Up)
    In the plot it leads the Y response and looks quite plausible.
    Detailed accounting of polarity and phase has not been applied.

    The ellipse parameter extraction process looks manageable, and could be
    automated.

Next:
    Need to automate the ellipse extraction process.  pgm_ellipse

    Need ellipse images with and without the sync marks.

    Need ways to pick points and identify center of the trace, which is
	about 10 pixels wide.

    The DAC has an output low-pass filter, which has not been characterized
    for phase delay.

    Jitter in sync marks needs to be accommodated or eliminated.

----------------------------------------
Oops:  point (Xb, Ya) is NOT on ellipse!
{vvvvvvvv

    Thus point (Xb, Ya) is on the ellipse in 2nd quadrant, and point (Xa, Yb)
    is on the ellipse in 4th quadrant.

	Xb = -50,  Ya = +226

	Uba = arccos( Xb / Ex )
	    = arccos( -50 / 90 ) = 2.160	(123.7 deg)

	Pba = arccos( Ya / Ey ) - Uba
	    = arccos( +226 / 398 ) - 2.160
	    = 0.967 - 2.160  = -1.193		(-68.36 deg)
	    += 2*Pi	add 2*Pi
	    = 5.090				(291.6 deg)
	    Phase difference computed from point (Xb, Ya).

    Confirm result:
	Xb = Ex * cos( Uba ) = 90 * cos( 2.160 ) = -50.0

	Ya = Ey * cos( Uba + Pba ) = 398 * cos( 2.160 + 5.090 ) = 226.0

    The zero crossing point on the ellipse in quadrant 4:
	It is symmetric, so the u parameter advances by Pi.

	Uab = Uba + Pi
	    = 2.160 + 3.14159  = 5.302

	Xa = Ex * cos( Uab ) = 90 * cos( 5.302 ) = +50.0

	Yb = Ey * cos( Uab + Pba ) = 398 * cos( 5.302 + 5.090 ) = -225.9

	This is consistent with measured (Xa, Yb).

Now find u for the zero (first) sync mark at point (507,241).

    Translate Sync mark coordinates:  (as above)
	Xellipse =  (Ximage - meanX)
	Yellipse = -(Yimage - meanY)
	where
	    meanX = (647 + 547) / 2  = 597
	    meanY = (827 + 375) / 2  = 601
	    
	Image				Ellipse
	-----				-------
	507,241  zero crossing		-90,  360
	529,485  1/8 cycle		-68,  116
	683,924  1/2 cycle		 86, -323

	Usync = arccos( x / Ex )
	      = arccos( -90 / 90 )  = 3.142

	Uy = arccos( y / Ey ) - Pba
	   = arccos( 360 / 398 ) - (-1.193)  = 1.634  (93.6 deg)
	#!! alternate, should be more accurate?

    Confirm result:
	X = Ex * cos( Usync ) = 90 * cos( 3.142 ) = -90.0
		Is on left edge, looks correct.

	Y = Ey * cos( Usync + Pba ) = 398 * cos( 3.142 + -1.193 ) = -147.0
	#!! Does not seem correct.  Should be ~+260

^^^^^^^^}
Above does not seem to have correct values to match the image ellipse.

----------------------------------------------------------------------------
## Ellipse Modeling in R
----------------------------------------------------------------------------
Plot ellipses in R and see what matches the image.
    See:  lissajous/exp/ex2022_05_22_ellipse/notes.text

    Make 100 points from 0 to 2*Pi:
    u <- (2 * Pi / 100) * c(0:99)

    cr <- rep( 'black', 100 )
    cr[1] <- 'red'      # mark zero, vectors number from 1
    cr[2] <- 'green'
    cr[10] <- 'green'   # extra mark visible when points are packed

    L <- 400
 >  plot( 90*cos(u), 398*cos(u + 3.8), col=cr, ylim=c(-L,L), xlim=c(-L,L) )
	Looks similar to the image ellipse.  Going CCW.
	Is best match to image.

    plot( 90*cos(u), 398*cos(u + 2.6), col=cr, ylim=c(-L,L), xlim=c(-L,L) )
	Looks similar to the image ellipse.  Going CW.

    plot( 90*cos(u), 398*cos(u + 5.090), col=cr, ylim=c(-L,L), xlim=c(-L,L) )
	This is Pba above, ellipse angled in 1st quadrant (+45 degrees),
	and more open than image.  Does not match the image.  But is CCW
	like the image.

 >  plot( 90*cos(u), 398*cos(u + 3.8), col=cr, ylim=c(-L,L), xlim=c(-L,L) )
    abline( h=0 );  abline( v=0 )
    locator(4)		# zero crossings, CCW from +X
	$x
	[1]  54.3684495  -0.3232661 -55.0149816  -0.3232661
	$y
	[1]   -0.1448263  243.3181065   -0.1448263 -243.6077591

    Ex <-  90
    Ey <- 398
    Pd <- 3.8
    x <- Ex * cos( u )
    y <- Ey * cos( u + Pd )
    plot( x, y, col=cr, ylim=c(-L,L), xlim=c(-L,L) )
    df <- data.frame( u, x, y )
    write.table( df, file="ellipse_p3.8.tab" )

    # Find the axis zero crossings:
    df
		    u             x          y
	1   0.0000000  9.000000e+01 -314.80515
	...
	15  0.8796452  5.736821e+01  -13.02970    (a)
	16  0.9424770  5.290073e+01   11.97323
	...
	26  1.5707950  1.194115e-04  243.51902    (b)
	...
	65  4.0212352 -5.736839e+01   13.03075    (c)
	66  4.0840670 -5.290092e+01  -11.97217
	...
	76  4.7123850 -3.582346e-04 -243.51819    (d)
	...
	100 6.2203482  8.982238e+01 -329.47584

    Thus
	    u       x       y		Image (x,y) above
	a)  0.91   55.1     0.0		+50, 0
	b)  1.57    0.0   243.5		  0, +226
	c)  4.05  -55.1     0.0		-50, 0
	d)  4.71    0.0  -243.5		  0, -226

	Uc - Ua = 4.05 - 0.91  = 3.14
	Ud - Ub = 4.71 - 1.57  = 3.14
	    Phase difference between points is Pi, as seen in the plot.

	Circulation is CCW as seen in the plot.

	The plot points are somewhat close to the Image above.  Good enough
	to be a guide to the correct calculation.

    Note Pd = 3.74 looks really close.

    The axis crossings seem the best place to estimate both u and Pd for
    any ellipse.  Points of constant delta-u are furthest apart in this
    region, giving better resolution in u.  Looks true for both narrow
    and circular ellipses.

