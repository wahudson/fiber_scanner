2022-07-15
			niDAQ in Matlab
			---------------

Matlab language learning and application running the National Instruments DAQ.

We have:  NI USB 6211, Bus powered, M-series DAQ

----------------------------------------------------------------------------
## Matlab reference
----------------------------------------------------------------------------

Language Fundamentals
    https://www.mathworks.com/help/matlab/language-fundamentals.html

Case sensitive:
    MATLAB is case sensitive for function, script, and variable names for all
    platforms, but name-value pairs can sometimes be insensitive.
    e.g.
    >> plot(1:10,'linewidth',3)
    >> plot(1:10,'LineWidth',3)
    >> plot(1:10,'LINEWIDTH',3)

Namespace clash:
    A variable may have the same name as a function.
    Ambiguity clash with no error, variable wins.
	e.g. function call  sin( w*t )  vs array indexing  sin( i ).

Loading new script:
    Best to clear the workspace to avoid bugs inheriting variables from the
    previous script.  e.g. Inheriting an array named "sin".

Constants:
    pi = 3.141592653589793

MATLAB Operators and Special Characters
    https://www.mathworks.com/help/matlab/matlab_prog/matlab-operators-and-special-characters.html
    .*   = element-wise multiplication
    ...  = line continuation
    :    = vector creation, indexing, for loop
    ;    = end of row in array, suppress result output (not really termination)
    ''   = Character array constructor - use for file names, plot labels
    ""   = String constructor
    ()   = indexing, operator precedence, function arguments
    []   = Array construction, concatenation, empty matrix, multiple lvalue
    *    = A * B   = multiply array A by B, as in matrix multiplication
    .*   = A .* B  = multiply array A by B, "element-wise"
    ./   = A ./ B  = divide   array A by B, "element-wise"
		Beware combining row/column vectors create matrix or scaler.

String and Character Arrays:
    'text'  - is a character array
    "text"  - is a string
    https://www.mathworks.com/help/matlab/matlab_prog/represent-text-with-character-and-string-arrays.html

String operations:
    strcat()	normal concatenation;  cell arrays strip trailing white-space
    append()	true concatenation, result is string if any input is string
    +           alias operator for append()
    https://www.mathworks.com/help/matlab/characters-and-strings.html

colon, :
    v = a:b
	Vector with elements a, a+1, a+2, .. b.  Need not be integer.
    v = a:i:b
	Vector [a .. b] increment by i
    Brackets need not enclose the range, but are OK?
    https://www.mathworks.com/help/matlab/ref/colon.html

zeros( Nrow, Ncol, ..)		Create array of all zeros.
ones(  Nrow, Ncol, ..)		Create array of all ones.
    zeros( 1, Ncol )		A row vector.
    zeros( Nrow, 1 )		A column vector.
    zeros( N )			An NxN matrix (disparaged, inconsistent).

linspace()
    Generate linearly spaced vector, similar to colon
    v = linspace( x1, x2, n )
	Generates n points with spacing (x2-x1)/(n-1).
    Always includes the end points.  Default n=100 (disparaged).
    https://www.mathworks.com/help/matlab/ref/linspace.html

Creating, Concatenating, and Expanding Matrices
    Most basic data structure is the matrix.  Even a single number is stored
    as a matrix.
    Commas (or <space> for short) separate elements within a row.
    v = [12, 62, 93, -8]
    v = [12  62  93  -8]
	Create a 4 element vector, space is the separator.
    A = [12 62; 93 -8]
	Create a 4 element array, semicolon separates rows.
    C = [A B]
	concatenate row vectors A and B (optional comma)
    https://www.mathworks.com/help/matlab/math/creating-and-concatenating-matrices.html

Matrices and Arrays
    size( A )  returns a row vector of the dimensions of A.
    https://www.mathworks.com/help/matlab/matrices-and-arrays.html

Array vs. Matrix Operations
    https://www.mathworks.com/help/matlab/matlab_prog/array-vs-matrix-operations.html

Array Indexing
    Index starts from 1 (not zero).
    Index with () parenthesis, not [] square brackets.
	A( row, col )
    Special index value 'end' is the last index in that dimension.
	A(end,end)  is last element in A
    A naked ':' colon indicates all elements in that dimension.
	A(:,3)  is the third column of A
	A(2,:)  is the second row of A
    A vector as index extracts a vector in that dimension.
	A(2:7,3)  is a column vector?
	A(3,2:7)  is a row vector?
    https://www.mathworks.com/help/matlab/math/array-indexing.html

times(), .* operator
    Vectors with different orientations (one row vector and one column vector)
    implicitly expand to form a matrix.

mtimes(), * operator
    Multiply row-vector by column-vector is the dot product (or inner product),
    which is a scalar.

Analog Input Subsystem
    General overview of concepts.
    https://www.mathworks.com/help/daq/analog-input-subsystem.html

daq( vendor )
    https://www.mathworks.com/help/daq/daq.interfaces.dataacquisition.daq.html
    vendor - Device vendor
	"ni" | "adi" | "mcc" | "directsound" | "digilent"
	Return:  DataAcquisition object
	e.g.
    dq = daq( 'ni' )

daqlist()
    Displays a table of all available devices for all supported vendors.
    https://www.mathworks.com/help/daq/daqlist.html?searchHighlight=daqlist

addoutput( dq, deviceID, channelID, measurementType )
    deviceID = string defined by the device vendor.
	Use 'daqlist' to obtain deviceID of currently connected hardware.
    channelID = numeric or string specific to the vendor and device.
    return:  ch= channel object
    https://www.mathworks.com/help/daq/daq.interfaces.dataacquisition.addoutput.html

addinput( dq, deviceID, channelID, measurementType )
    https://www.mathworks.com/help/daq/daq.interfaces.dataacquisition.addinput.html

Channel Properties
    ch.Range		= [min, max] voltage values
    ch.Coupling		= 'AC', 'DC'
    ch.TerminalConfig	= 'Differential', 'SingleEnded', ..
    https://www.mathworks.com/help/daq/channel-properties.html

read(dq, ...)
    Read data acquired by hardware
    https://www.mathworks.com/help/daq/daq.interfaces.dataacquisition.read.html

readwrite()
    inScanData = readwrite( dq, outScanData )
    Device writes outScanData, and reads back inScanData matrix, in foreground.
    outScanData = M-by-N matrix, M= number of scans, N= number of channels.
    inScanData  = resulting matrix of M rows (scans) of read data.
    Command blocks until complete.
    Presume columns are in addoutput/addinput declaration order.
    https://www.mathworks.com/help/daq/daq.interfaces.dataacquisition.readwrite.html

start(d, ...)
    Start DataAcquisition background operation.
    https://www.mathworks.com/help/daq/daq.interfaces.dataacquisition.start.html

save()
    Save workspace variables to file.
    save( 'file.txt', 'v1', v2', .. , '-ascii', '-tabs' );
	'-ascii'   = ASCII format with 8 digits precision, space separated
	'-double'  = 16 digits precision, instead of 8
	'-tabs'    = tab separator, added to spaces
		    Seems to add tabs to existing spaces, even before the
		    <CR><LF> line ending, pretty useless.
    Variable length list of variables, which are probably output sequentially.
    matrix:  is in rows, with new-line on each row.
    vector:  is a single line of space separated values.
	(maybe transpose to get one value per line?)
    https://www.mathworks.com/help/matlab/ref/save.html

diary - Log Command Window text to file
    diary file.txt	file to write console text output
    diary off		turn off writing
    diary on		turn on  writing
	Note - turn off diary to flush file buffer before viewing file.
	Appends to file if it already exists.

date = datetime( 'now' );	return a scalar array of current date and time
date.Format = 'yyyy-MM-dd HH:mm:ss';
    Date and time conversion.  Way too complicated!

type - Display contents of a file in command window
    type file.txt

format()
    Set the interactive output display format.

pause( n )		Stop Matlab execution temporarily.
    n = number of seconds to sleep.
    pause( 'on' )	enable sleep
    pause( 'off' )	disable sleep

sprintf( formatSpec, vars, .. )			return a string
fprintf( formatSpec, vars, .. )			print to screen
fprintf( fileID, formatSpec, vars, .. )		print to file
fileID = fopen( 'exp.txt', 'w' );		open file to write
fclose( fileID );
    Similar to standard C.
    https://www.mathworks.com/help/matlab/ref/fprintf.html

Plotting:

figure(n)
    Create a new figure window.  n= figure number identifier

clf
clf(n)
    Clear figure window contents.

plot( x, y );
plot( x, y, '-o' );
    Plot solid line with circle markers.  See LineSpec.
plot( x, y1, x, y2 );
    Plot multiple lines in current figure.
plot( matrix );
    Plot each matrix column as a separate line vs index number.

xlim([0 10])
ylim([-0.4 0.8])
title('2-D Line Plot')
xlabel('x')
ylabel('cos(5x)')
    These operate on the current figure (after the plot is made).
    https://www.mathworks.com/help/matlab/axes.html
    https://www.mathworks.com/help/matlab/creating_plots/change-axis-limits-of-graph.html
    https://www.mathworks.com/help/matlab/ref/matlab.graphics.axis.axes-properties.html

scatter(x,y);
scatter(x,y,sz,c,'filled');
    sz= point symbol size
    c = color vector, length of x
    Scatter plot can vary point colors.
    https://www.mathworks.com/help/matlab/ref/scatter.html

colormap(map)
colormap( gray(256) )
    Set the colormap for the current figure.

gray(m)
    Gray scale color map.
    https://www.mathworks.com/help/matlab/ref/gray.html

DAQ Explanations:
-----------------
    https://www.mathworks.com/help/daq/acquire-continuous-and-background-data-using-ni-devices.html

    dq.ScansAvailableFcn
    dq.ScansAvailableFcnCount

----------------------------------------------------------------------------
## User Suggestions
----------------------------------------------------------------------------
My thoughts running experiments from a USB drive on a Windows box.
    Code and data is prepared/analyzed from Linux.

Source files:
    Make them read-only to have a safe reference copy.
    Save modified Matlab script to file with an added suffix.
    Save/run major modifications with a new name for better tracking in
	console window.

Console (comand) Window output:
    Make copy in a log file.
    >> diary console_2022_10_18.txt

----------------------------------------------------------------------------
## Examine initial script from Cameron:  2022-07-14
----------------------------------------------------------------------------

niDAQ/exp/ex2022_07_14_piezo/
    ContinuousDataAcq_withFourierFilteringV3.m

Building up documentation reference of useful script commands.

Acquire Continuous and Background Data Using NI Devices
    https://www.mathworks.com/help/daq/acquire-continuous-and-background-data-using-ni-devices.html


Script:
    function plotMyData(d, ~, fgui)
	global data
	data = read(d, d.ScansAvailableFcnCount, "OutputFormat", "Matrix");
    end

%% Set rate of data set processing
    d.ScansAvailableFcnCount = round(62500/2);
    d.ScansAvailableFcn = @(d,evt) plotMyData(d,evt,fgui);

%% Flush and re-start device
    flush(d)
    preload(d,[OutX', OutY'])
    start(d);

    OutX, OutY are row vectors.  The (') takes transpose into column vectors,
    then [,] concatenates rows into a matrix (the comma may be optional).

----------------------------------------------------------------------------
## Dataset script  2022-08-02
----------------------------------------------------------------------------

Generate an output waveform data set, and read back the corresponding
input data set from PSD and Photodetector.

%% Destroy previous objects??

%% DAQ configuration
    % addoutput/addinput order is column order in data matrix

    % construct DataAcquisition object
    dq = daq( 'ni' );

    % output channels for piezo drive signals
    chOutX = addoutput( dq, 'Dev1', 'ao0', 'Voltage' );
    chOutY = addoutput( dq, 'Dev1', 'ao1', 'Voltage' );

    % input channel from photodetector
    chInSig = addinput( dq, 'Dev1', 'ai1', 'Voltage' ); % Intensity Signal

    % input channels from PSD
    chInSum = addinput( dq, 'Dev1', 'ai2', 'Voltage' ); % PSD Sum Pin Signal
    chInX   = addinput( dq, 'Dev1', 'ai3', 'Voltage' ); % PSD X Pin Signal
    chInY   = addinput( dq, 'Dev1', 'ai4', 'Voltage' ); % PSD Y Pin Signal

    chInX.Range = [-5,5];
    chInY.Range = [-5,5];

    % DAQ sample rate
    dq.Rate  = 62500;		% set samples per second
    sampRate = dq.Rate;

%% Parameters

    FreqX_Hz = 805;
    FreqY_Hz = 806;

    DatasetTime_s = 2.0;	% data set duration

    OutAmp_V = 0.05;		% output amplitude, sine wave voltage peak

    pi = 3.14159;

%% Output waveforms

    % sample interval from DAQ sample rate
    dt_s = 1 / sampRate;

    nSamps = round( DatasetTime_s / dt_s );

    % vector of time values
    tVec_s = [0:nSamps] * dt_s;

    wX = 2 * pi * FreqX_Hz;
    wY = 2 * pi * FreqY_Hz;

    outVecX = OutAmp_V * sin( wX * tVec_s );
    outVecY = OutAmp_V * sin( wY * tVec_s );

    outScanData = [transpose( outVecX ), transpose( outVecY )];
	    % transpose into column vectors, then concatenate rows

    % outScanData = transpose( [outVecX; outVecY] );
	    % concatenate into a 2-row matrix, then transpose

    inScanData = readwrite( dq, outScanData, "OutputFormat","Matrix" );

    ofile = "xyz" + ".txt";
    save( 'file.txt', 'inScanData', '-ascii' );


%% Loop

    for ii = [1 2 3]
	ofile = "xyz" + ii + ".txt"
    end


% initial setup of sampling grid
Signal = data;

sum = Signal(:,2);
x= Signal(:,3);
y = Signal(:,4);
xcal = (10*x)./(2*sum);
ycal = (10*y)./(2*sum);

% Apply Correction
xcal = XCORR.*xcal.*um;
ycal = YCORR.*ycal.*um;

