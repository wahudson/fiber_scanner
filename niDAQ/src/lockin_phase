#!/usr/bin/Rscript --vanilla
# 2022-11-14  William A. Hudson

# Compute Lockin Phase and Magnitude from a PSD data table.
#
# usage:  lockin_phase  [options]  inFile ..
#     inFile = input data file, or literal 'stdin'
#  options:
#    --FreqR_Hz=f	measurement frequency
#    --nBegin_cyc=N	cycle number to begin analysis
#    --nEnd_cyc=N	cycle number to end   analysis

# inFile:
#     Table, no heading, with columns:  "Vsig", "Vsum", "Vx", "Vy"
#     sampRate = 62500 sample/s
#     length   = any number of samples
#
#---------------------------------------------------------------------------

# Data Parameters:
    sampRate <- 62500		# sample/s

    Pi <- 3.1415926535;

show_usage <- function()
{
    cat(
	"Lockin Phase and Magnitude from a PSD data table.",
	"usage:  lockin_phase  [options]  inFile ..",
	"    inFile = input data file, or literal 'stdin'",
	" required:",
	"   --FreqR_Hz=f803.0   measurement frequency",
	"   --nBegin_cyc=800    cycle number to begin analysis",
	"   --nEnd_cyc=1600     cycle number to end   analysis",
	" options:",
	"   --table             output in table format",
	sep="\n"
    );
}

# Option processing
    ok <- TRUE

    op_verbose      <- TRUE
    op_TESTMODE     <- FALSE
    op_table        <- FALSE
    FreqR_Hz        <- 803.0	# base frequency, the lockin reference
    nBegin_cyc      <- 800
    nEnd_cyc        <- 1600

    argv <- commandArgs( trailingOnly=TRUE )

    for ( ag in argv )
    {
	if ( ! grepl( "^-", ag ) ) { break }	# not an option

	if ( "-" %in% ag ) { break }		# single "-" is an arg value

	argv <- argv[-1]		# pop off the option

	av <- sub( "^.+?=", "",  ag )	# value   part
	ag <- sub( "=.+$",  "=", ag )	# --opt=  part, or the original

	if      ( "-v"              %in% ag ) { op_verbose      <- TRUE }
	else if ( "--table"         %in% ag ) { op_table        <- TRUE }
	else if ( "--FreqR_Hz="     %in% ag ) { FreqR_Hz        <- av   }
	else if ( "--nBegin_cyc="   %in% ag ) { nBegin_cyc      <- av   }
	else if ( "--nEnd_cyc="     %in% ag ) { nEnd_cyc        <- av   }
	else if ( "--"              %in% ag ) { break }     # end of options
	else if ( "--help"          %in% ag ) { show_usage(); quit() }
	else if ( "--TESTMODE"      %in% ag ) { op_TESTMODE     <- TRUE }
	else {
	    stop( "unknown option:  ", ag )
	}
    }

    FreqR_Hz   <- as.numeric( FreqR_Hz   )
    nBegin_cyc <- as.numeric( nBegin_cyc )
    nEnd_cyc   <- as.numeric( nEnd_cyc   )

    if ( !( nBegin_cyc < nEnd_cyc ) ) {
	warning( "Error:  require nBegin_cyc < nEnd_cyc" )
	ok <- FALSE
    }

    if ( op_TESTMODE ) {
	cat( sep='', "op_verbose     =", op_verbose,     "=\n" )
	cat( sep='', "FreqR_Hz       =", FreqR_Hz,       "=\n" )
	cat( sep='', "nBegin_cyc     =", nBegin_cyc,     "=\n" )
	cat( sep='', "nEnd_cyc       =", nEnd_cyc,       "=\n" )
	print( argv )
    }

# Check input files
    for ( inFile in argv )
    {
	if ( file.access( inFile, mode=4 ) ) {
	    warning( "Error:  file not found: ", inFile )
	    ok <- FALSE
	}
    }

    if ( ! ok ) { quit( status=1 ) }

# Analysis range
    tBegin_s  <- nBegin_cyc / FreqR_Hz	# begin analysis time
    tEnd_s    <- nEnd_cyc   / FreqR_Hz	# end   analysis time

    dt_s      <- 1 / sampRate	# delta time step (second/sample)

    kBegin    <- round( tBegin_s / dt_s )
    kEnd      <- round( tEnd_s   / dt_s )

    rn    <- c(kBegin:kEnd)	# range to compute

# Output context
    cat( sep='', "FreqR_Hz   = ", FreqR_Hz,   "\n" )
    cat( sep='', "nBegin_cyc = ", nBegin_cyc, "\n" )
    cat( sep='', "nEnd_cyc   = ", nEnd_cyc,   "\n" )
    cat( sep='', "kBegin     = ", kBegin,     "\n" )
    cat( sep='', "kEnd       = ", kEnd,       "\n" )
    cat( sep='', "sampRate   = ", sampRate,   "\n" )
    cat( sep='', "dt_s       = ", dt_s,       "\n" )
    cat( "\n" )

# Reference sine waves
    Wr    <- FreqR_Hz * 2 * Pi

    WTvec <- Wr * dt_s * rn

    RIvec <- sin( WTvec )	# in-phase   reference
    RQvec <- cos( WTvec )	# quadrature reference

# Compute results for each file

    for ( inFile in argv )
    {
	cat( sep='',"inFile     = ", inFile, "\n" )

    # Read in data table
	df <- read.table( inFile, header=FALSE )

	names(df) <- c( "Vsig", "Vsum", "Vx", "Vy" )

    # Compute raw PSD position for X and Y measurements
	RDx_mm <- 5 * df$Vx[rn] / df$Vsum[rn]
	RDy_mm <- 5 * df$Vy[rn] / df$Vsum[rn]

    # Place origin at the mean values
	Meanx_mm <- mean( RDx_mm )
	Meany_mm <- mean( RDy_mm )

	Dx_mm <- RDx_mm - Meanx_mm
	Dy_mm <- RDy_mm - Meany_mm

    # Lockin calculation
	Lxi_mm <- mean( Dx_mm * RIvec )
	Lxq_mm <- mean( Dx_mm * RQvec )

	Lyi_mm <- mean( Dy_mm * RIvec )
	Lyq_mm <- mean( Dy_mm * RQvec )

    # Compute amplitude and phase relative to +X axis (the ellipse extent)
	Ex_mm  <- 2 * sqrt( Lxi_mm^2 + Lxq_mm^2 )
	Px_rad <- atan2( Lxq_mm, Lxi_mm )
	Px_deg <- Px_rad * 180 / Pi

	Ey_mm  <- 2 * sqrt( Lyi_mm^2 + Lyq_mm^2 )
	Py_rad <- atan2( Lyq_mm, Lyi_mm )
	Py_deg <- Py_rad * 180 / Pi

    # Compute ellipse phase, as in
	    # x <- Ex * sin( u )
	    # y <- Ey * sin( u + Pe )
	PE_rad <- Py_rad - Px_rad
	PE_deg <- PE_rad * 180 / Pi

    # Output results
	if ( ! op_table ) {
	    cat( sep='', "Lxi_mm  = ", Lxi_mm,   "\n" )
	    cat( sep='', "Lxq_mm  = ", Lxq_mm,   "\n" )
	    cat( sep='', "Lyi_mm  = ", Lyi_mm,   "\n" )
	    cat( sep='', "Lyq_mm  = ", Lyq_mm,   "\n" )
	    cat( sep='', "Ex_mm   = ", Ex_mm,    "\n" )
	    cat( sep='', "Px_deg  = ", Px_deg,   "\n" )
	    cat( sep='', "Ey_mm   = ", Ey_mm,    "\n" )
	    cat( sep='', "Py_deg  = ", Py_deg,   "\n" )
	    cat( sep='', "PE_deg  = ", PE_deg,   "\n" )
	    cat( sep='', "Mnx_mm  = ", Meanx_mm, "\n" )
	    cat( sep='', "Mny_mm  = ", Meany_mm, "\n" )
	}
	else {
	    qf <- data.frame(
		Lxi_mm, Lxq_mm,
		Lyi_mm, Lyq_mm,
		Ex_mm,  Px_deg,
		Ey_mm,  Py_deg,
		PE_deg,
		Meanx_mm, Meany_mm
	    )
	    options( width=120 )
		# line wrapping for printing output data frame
	    print( qf, digits=5 )
		# neatly formatted table, folded on wrapping width
	}

	cat( "\n" )

    # Generate theoretical ellipse, as in
	# x = Ex * sin( u )
	# y = Ey * sin( u + Pd )

	PE_rad <- PE_deg * Pi / 180

	uvec <- c(0:99) * (2 * Pi / 100)    # one cycle divided into 100 parts
	ex <- Ex_mm * sin( uvec )
	ey <- Ey_mm * sin( uvec + PE_rad )

    # Plot results
	pdf( "file.pdf" )
	plot( Dx_mm, Dy_mm, pch='.', xlim=c(-1,1), ylim=c(-1,1) )
	points( ex, ey, col='red' )
	abline( h=0 )
	abline( v=0 )
	graphics.off()

    } # for inFile

