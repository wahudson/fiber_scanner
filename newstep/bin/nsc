#!/usr/bin/perl -w
# 2024-01-11  William A. Hudson

# nsc -- NSC200 Controller cockpit Command/Query
#
# For MKS-Newport NSC200 micrometer motion controller.
# Maintenance comments:  #!!
#---------------------------------------------------------------------------

use strict;

use Getopt::Long  ();
use Pod::Usage    ( 'pod2usage' );
use Time::HiRes   ();

our $ProgFile = $0;	# this program
our $ProgName = $0;
    $ProgName =~ s:^.*/:: ;

our $ToolDir;

# FindBin allows a symbolic link to the wrapper script, which must
#    be in the ToolDir.  $RealBin will be set to the actual directory
#    the script is in.
#
use FindBin qw($RealBin);

BEGIN
{
    $ToolDir = $RealBin;

    unless ( -d $ToolDir ) {
	die( "Error:  missing ToolDir:  $ToolDir\n" );
    }
}

use lib "$ToolDir";

use NscLib ();		# NewStep NSC200 Controller interface library.

#---------------------------------------------------------------------------
## Main program usage
#---------------------------------------------------------------------------

# Print program usage.
# call:
#    print_usage()
#
sub print_usage
{
    print( <<USAGE );
    NewStep NSC200 controller interface
usage:  $ProgName [main options] action [args..]
  action:  (require one)
    send   XX...    send any command
    query  [XX ..]  query command list ('?' is implied)
    watch  XX YY .. watch a query command list
    status          show hardware status (PH?)
    state           show System State {SL SR AC AU VA VU TP TS}
    motor           motor status {Stopped, Moving, Disabled}
    move  N         move to absolute N micro-steps
    stop            stop motor
    error           show error status
    showconf        show hardware configuration (SH?) [invalid]
  main options:
    --addr=N,-aN    controller address, {0..255}, (default 0)
    --trace,x       show execution on stderr
    --help          show this usage
    --man           show manual page
  environment:
    NSC220_ADDR     controller address {0..255} (default 0)
    NSC220_DEV      serial port device file
USAGE
}

#---------------------------------------------------------------------------
## Main program
#---------------------------------------------------------------------------

{

## Option processing.

    # Secret options:
    # --TESTMODE     file descriptor 3 is data to serial port

    my $op_trace        = 0;
#   my $op_verbose      = 0;
    my $op_TESTMODE     = 0;
    my $op_addr         = $ENV{NSC220_ADDR} || 0;

    Getopt::Long::Configure(
	'posix_default',
    #	'bundling',		# enable -rN, require --word
    #	'bundling_override',	# good for -r3, clash --vx -v -x
	'bundling_values',	# allow only -r3
	'no_ignore_case',
    );

    Getopt::Long::GetOptions(
	"--help"         => sub { print_usage();  exit( 0 ) },
	"--man"          => sub { do_man();       exit( 0 ) },

	"--trace|x"      => \$op_trace,
#	"--verbose|v"    => \$op_verbose,
	"--TESTMODE"     => \$op_TESTMODE,

	"--addr=i"       => \$op_addr,
	"-a=i"           => \$op_addr,

    ) || do {	# GetOptions() returns false on errors in option parsing.
	Error( "Type '$ProgName --help' for usage.\n" );
	exit( 2 );
	# Do not show usage longer than 5 lines, let user see argument error.
    };

#    print( "ProgFile= $ProgFile\n" );
#    print( "ProgName= $ProgName\n" );
#    print( "ToolDir=  $ToolDir\n"  );
#    print( "op_addr    = $op_addr\n"     );
#    print( "ARGV= ", @ARGV, "\n" );

    my $act = shift( @ARGV );

    unless ( $act ) {
	#!! Error( "require command action\n" );
	$act = 'error';
    }

    last  if ( Error() );

    my $Lx = NscLib->new(
	Error_sub => sub { Error( @_ ) },
	AddrNum      => $op_addr,
	TESTMODE     => $op_TESTMODE,
	TraceEx      => $op_trace,
	TraceReply   => 1,
    ) || exit( 1 );

    if    ( $act eq 'send'     ) { do_send(       $Lx ); }
    elsif ( $act eq 'query'    ) { do_query(      $Lx ); }
    elsif ( $act eq 'watch'    ) { do_watch(      $Lx ); }
    elsif ( $act eq 'status'   ) { do_status(     $Lx ); }
    elsif ( $act eq 'state'    ) { do_state(      $Lx ); }
    elsif ( $act eq 'motor'    ) { do_motor(      $Lx ); }
    elsif ( $act eq 'move'     ) { do_move(       $Lx ); }
    elsif ( $act eq 'stop'     ) { do_stop(       $Lx ); }
    elsif ( $act eq 'error'    ) { $Lx->check_err();      }
    elsif ( $act eq 'showconf' ) { $Lx->show_HwConfig();  }
    else {
	Error( "unknown action:  $act\n" );
    }


#    $Lx->Error( "hello world\n" );
#    $Lx->show_debug();

#    $Lx->send_raw( "XX" );

#    $Lx->check_err();

#    print( $Lx->decode_hardware( 0x77 ) );

#    $Lx->show_HwConfig();


    if ( $Lx->Error() ) { exit( 1 ); }
}

exit( (Error()) ? 1 : 0 );


#---------------------------------------------------------------------------
## Actions
#---------------------------------------------------------------------------

# Send raw command followed by error query.
# call:
#    do_send( $Lx );
#
sub do_send
{
    my( $xc ) = @_;
    unless ( @ARGV ) {
	Error( "require command arg\n" );
	last;
    }

    $xc->send_raw( @ARGV );
    $xc->check_err();
    1;
}


# Query command followed by error query.
#    ARGV = list of query commands (without the '?').
#    Each query is followed by an error check.
#    Stop on first error, ignoring rest of ARGV.
# call:
#    do_query( $Lx );
#
sub do_query
{
    my( $xc ) = @_;
    unless ( @ARGV ) {
	Error( "require command arg\n" );
	last;
    }

#!!    $xc->{TraceEx} = 1;		# force to see each command

    foreach my $cmd ( @ARGV )
    {
	unless ( $cmd =~ m/^[A-Z][A-Z]$/ ) {
	    Error( "require plain XX command, no '?':  $cmd\n" );
	    last;
	}

	$cmd .= '?';

	my $reply = $xc->query_chk( $cmd );

	unless ( defined( $reply ) ) {
	    Error( "no reply for:  $cmd\n" );
	    next;
	}

	print( "$reply\n" );
    }

    1;
}


# Show status (PH?).
# call:
#    do_status( $Lx );
#
sub do_status
{
    my( $xc ) = @_;
    if ( @ARGV ) {
	Error( "no args used\n" );
    }

    $xc->show_status();
    1;
}


# Show system state.
# call:
#    do_state( $Lx );
#
sub do_state
{
    my( $xc ) = @_;
    if ( @ARGV ) {
	Error( "no args used\n" );
    }

    $xc->show_state_raw();
    1;
}


# Show Motor status.
# call:
#    do_motor( $Lx );
#
sub do_motor
{
    my( $xc ) = @_;
    if ( @ARGV ) {
	Error( "no args used\n" );
	return 0;
    }

    my $motor = $xc->query_motor();

    print( "Motor:  $motor\n" );
    1;
}


# Watch a query command list.
#    <ctrl-C> to quit.
# call:
#    do_watch( $Lx );
#    @ARGV  = list of query commands without '?', e.g. "TP TS"
#
sub do_watch
{
    my( $xc ) = @_;
    unless ( @ARGV ) {
	Error( "require command arg\n" );
	last;
    }

    $xc->{TraceEx} = 1;		# force trace to see replies

    while ( 1 )
    {
	foreach my $que ( @ARGV ) {
	    $xc->query_chk( $que . '?' );	# ignore return value
	}
	sleep( 1 );
    }

    1;
}


# Move to absolute micro-step position.
# call:
#    do_move( $Lx );
#    @ARGV  = list of query commands without '?', e.g. "TP TS"
#
sub do_move
{
    my( $xc ) = @_;
    unless ( scalar( @ARGV ) == 1 ) {
	Error( "require move arg\n" );
	return( 1 );
    }

    my $newpos = $ARGV[0];

    my $oldpos = $xc->query_chk( "TP?" );
    printf( "%d  start position (uStep)\n", $oldpos );

    $xc->send_raw( "PA $newpos" );
    $xc->check_err();

    while ( 1 )
    {
	my $pos = $xc->query_chk( "TP?" );	# tell position
	printf( "%d\n", $pos );

	if ( $pos == $oldpos ) { last; }

	$oldpos = $pos;
	sleep( 1 )  unless ( $xc->{TESTMODE} );
    }

    my $motor = $xc->query_chk( "TS?" );	# motor status

    unless ( $motor == 81 ) {
	Error( "motor not stopped\n" );
    }

    1;
}


# Stop motor.
# call:
#    do_stop( $Lx );
#    @ARGV  = list of query commands without '?', e.g. "TP TS"
#
sub do_stop
{
    my( $xc ) = @_;

    $xc->send_raw( "ST" );
    $xc->check_err();

    my $motor = $xc->query_chk( "TS?" );	# motor status

    unless ( $motor == 81 ) {
	Error( "motor not stopped\n" );
    }

    my $pos = $xc->query_chk( "TP?" );
    printf( "%d  position (uStep)\n", $pos );

    1;
}


#---------------------------------------------------------------------------
## functions
#---------------------------------------------------------------------------

# Show command usage.
# call:
#    do_usage();
# return:
#    ()  : unused
#
sub do_usage
{
    pod2usage( {
	-message => "nscc - NewStep NSC200 literal Command/Query",
	-exitval => "NOEXIT",
	-verbose => 0,
    } );
    1;
}


# Show man page.
#
sub do_man
{
    my $pager = $ENV{'PAGER'} || "less";

    open( STDOUT, "| $pager" );

    {
	unless ( -r $ProgFile ) {   # message embedded in output
	    print( "Error:  file not found:  $ProgFile\n\n" );
	    last;
	}

#	system( "pod2text -s < $ProgFile" );
	system( "pod2man -s 1 -n $ProgName --center='User Contrib' $ProgFile | nroff -man" );
    }

    close( STDOUT );
    1;
}


#---------------------------------------------------------------------------
## Error Handling
#---------------------------------------------------------------------------

our $Error_cnt = 0;	# (private)

# Error message reporting.
# call:
#    Error( @text )	Print error message, increment error count.
#    Error()		Get error count.
# return:
#    ()  = Error count, false if no errors were recorded.
#
sub Error
{
    if ( @_ ) {
	warn( "Error:  ", @_ );
	$Error_cnt ++;
    }
    return( $Error_cnt );
}


__END__

#---------------------------------------------------------------------------
## Man page
#---------------------------------------------------------------------------
# See also:  perlpod(1)  perlpodstyle(1)

=head1		NAME

nsc - NSC200 Controller cockpit Command/Query

=head1		SYNOPSIS

 nsc [main options] action [args..]
  action:  (require one)
    send   XX...    send command
    query  XX?...   query command
    status          show hardware status (PH?)
    watch  XX YY .. watch a query command list
    error           show error status
    showconf        show hardware configuration (SH?)
  main options:
    --addr=N,-aN    controller address, {0..255}, (default 0)
    --trace,x       show execution on stderr
    --help          show this usage
    --man           show manual page


=head1		DESCRIPTION

Operate the NewStep NSC200 motorized micrometer controller.
Is an abstraction of the 2-character ASCII command interface.

Require controller serial port be defined in environment variable:  e.g.

    % export  NSC200_DEV=/dev/ttyUSB0

A delay (0.1 seconds) is issued after the command to give additional time
for the controller and help it to not miss any following command.

=head2			Command Format

NewStep commands are of the form:

    nnAAxx
    nnAA?
 where
    nn = controller number {0:255}
    AA = two character command name
    xx = optional decimal value, usually in uStep
    ?  = query (literal question mark)

=head2			Command Summary

 pg = page number in NewStep User's Manual PDF
 Command type:
	 .? = as Command or Query
	 .- = as Command only
	 -? = as Query only

 pg  Cmd .?  Command Description
 ---  -- --  ----------------------------
 86.  SL .?  Negative Software Limit - Set Left Travel Limit
 89.  SR .?  Positive Software Limit - Set Right Travel Limit

 62.  AC .?  Acceleration - Set Acceleration
 63.  AU .?  Maximum Acceleration - Set Maximum Acceleration

 95.  VA .?  Velocity - Set Velocity
 95.  VU .?  Maximum Velocity - Set Maximum Velocity

 78.  PA .?  Absolute Position - Move to Absolute Position
 81.  PR .?  Relative Position - Move Relative
 93.  TP -?  Tell Position - Read Position
 90.  ST .-  Stop Motion

 94.  TS -?  Controller Motor Status
 80.  PH -?  Hardware Status - Get Hardware Status
 92.  TE -?  Tell Error - Read Error Code

 69.  JA .?  Jog - Start Jog Motion at speed nn
 70.  JS .?  Jog Scale Factor (speed multiplier)

 71.  KM .?  Knob Mode (velocity or position)
 88.  SP .?  Knob Position - Set Position for Knob Control
 91.  SV .?  Knob Velocities - Set Velocities For Knob Control
 79.  PD .?  Position Delay - Position Delay in Knob Control

 72.  MF .-  Motor OFF (disabled)
 73.  MO .-  Motor ON (enabled)

 75.  OA .?  Homing Acceleration [invalid]
 76.  OH .?  Homing Speed [invalid]
 77.  OR .?  Home - Search for Home (negative hard limit)
 67.  DH .?  Define Home Position

 83.  SA .-  Set Controller Address
 82.  RS .-  Reset Controller
 84.  SH .?  Set Hardware Configuration [invalid]

 68.  ID .?  Positioner Identification - Set Positioner Name [invalid]
 64.  BA .?  Backlash Compensation

 87.  SM .-  Save in Memory - Save Settings to EEPROM (max writes ~100?)
 66.  BZ .-  Restore EEPROM Content to Default

 65.  BX .?  Scan Switchbox
 74.  MX .?  Select Switchbox Channel

 96.  VE -?  Firmware version - Read Controller Firmware Version


=head1		OPTIONS

=over 8

=item B<--help>             - Show command usage and exit.

=item B<--man>              - Show man page and exit.

Prints the manual page and exits.

=item B<--trace>            - Trace command execution.

Show actions as they are executed on stderr.

=back


=head1		RETURN VALUE

0= success, otherwise errors


=head1		EXAMPLES


 # Required environment for serial port.
 % export  NSC200_DEV=/dev/ttyUSB0

 # Run Absolute Position (PA) command to 1024 uSteps on controller 3.
 % nsc send  PA1024

 # Query error status
 % nsc error

 # Query hardware status
 % nsc hard

=head1		ENVIRONMENT

=over 8

=item B<NSC200_DEV>         - Serial port device file.

Device file for the NSC200 controller RS-232 interface.

=item B<PAGER>

Value defines an output filter used to display manual pages.
By default, less(1) is used.  If PAGER='', stdout is written with no paging.

=back


=head1		SEE ALSO

nscinit(1)

=cut

