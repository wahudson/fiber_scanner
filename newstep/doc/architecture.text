2024-12-23  William A. Hudson

		NewStep Micrometer Controller
		-----------------------------

A command set to operate the MKS-Newport NSC200 micrometer motion controller.

This controller is circa 2005.
It has an RS-232 interface, which was common on old personal computers.
API is a simple character based command and query system.

The NewStep software (on CD) is for Windows 98, 2000, NT or XP - essentially
unusable.

This development is on Linux.

Initial objectives:
   IS command line user interface.
   NOT a GUI.
   IS one NSA12 Motor and one NSC200 Controller, NOT multiple.
   IS somewhat hardwired, NOT fully generic.
   NOT every capability is implemented.
   IS good enough to get started.

----------------------------------------------------------------------------
## Initial Ideas
----------------------------------------------------------------------------

Start with stand-alone commands, then move toward a cockpit command.
Philosophy is modular and re-usable.  Hence Linux.

Possible initial commands:

    nscinit	Initialize the RS-232 serial port.  stty

    nscc	Issue literal command/query.  Check error status.

    nscmove	Move controller position.

    nscconf	Configuration

    nscstatus	Status


Position Values:

    Position is in full-steps (fStep) or micro-steps (uStep).
    Need conversions to/from micrometers (um).
    Full step size depends on the micrometer motor.

    64 uStep per fStep

RS-232 port identification:
    How does each command know which serial port to use?

 >  A) Environment variable.  e.g.  NSC200_PORT
	+ Allows multiple ports in same shell.
	- Environment variable must get set.

    B) Symlink indirection.  e.g.  ~/NSC200.tty -> /dev/ttyUSB0
	+ No env variable.
	- Only one port per user.

    C) Hardwired in code.
	- We can do better.

----------------------------------------------------------------------------
## RCM Z-stage
----------------------------------------------------------------------------

    Use NAS12 motorized micrometer on RCM stage for Z-height.

Z-stack collection:
    Manual position Z for center of stack, i.e. focus on object.
    Then automatic scan +-Range on both sides stepping a fixed amount Dstep.
    Stop at each Dstep and tell Matlab to capture an  image.
    Control is from Linux box running eh motorized micrometer.

Manual positioning:
    Use the NewStep controller Knob to set start position.
    Computer can read out that position and scan around it.

Matlab RCM image capture:  (on Windows box)
    Is essentially the existing rcm_uno.m program with a minor addition.

    Read serial port for commands from Linux box running the micrometer.
    Main command is to take an image and save it as the given file name.
    File name has the Z-height.

    Idea is to keep the Matlab script focused on one task - take an image.
    It is already too complex and mostly un-testable.  Do not want to add
    even more complexity of a Z-sweep.

    while ( 1 )
    {
	Read cmd from serial port.  Want to block waiting for input.

	Do action specified by command:
	case cmd in
	{
	    "echo":  echo response

	    "image":
		ofile = command argument
		Run RCM image capture, save image in ofile.
	}
	Write "done" indicator on serial port.
    }

Z-stack on Linux Box:

    for ( z= start;  z < end;  z = z + dz )
    {
	Move stage to z position.  Wait for completion.

	ofile = prefix . z . ".png";

	Send command to Matlab:  "image  " . ofile

	Read reply from Matlab.  Want block on reading.
	Print reply.
    }

