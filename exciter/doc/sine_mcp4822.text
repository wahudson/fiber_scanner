2022-03-12  William A. Hudson

		Sine Wave DAC Program - dac_mcp4822
		-----------------------------------

Generate a sine wave with amplitude ramp control.
A program to operate an MCP4822 DAC on RPi rgUniSpi.

----------------------------------------------------------------------------
## Purpose
----------------------------------------------------------------------------

    Intended for exploring fiber scanner resonance frequency.

    Initial version with static frequency and amplitude.
    Then add amplitude ramp.
    Then add frequency sweep.

----------------------------------------------------------------------------
## Discussion
----------------------------------------------------------------------------

    Exciter will be driven by a current buffer.

Shared resources:

    The program cannot know what the actual external configuration is.
    Thus it should not reconfigure the Gpio pins, leave that to the user.

----------------------------------------------------------------------------
## Initial Thoughts
----------------------------------------------------------------------------

    Initial ideas of what needs to be controlled from the command line.

usage:  sine_mcp4822 [options]

  options:

    [-a|-b]         DAC channel (default is A)

    --freq=200.1    frequency in Hz
    --stride=20.3   stride thru wave table that makes frequency

    --amplitude=0.5 amplitude Vpp		--vpp=
    --gain=         gain multiplier for sine wave -1 to +1 Vpp

  ? --dacgain=      DAC gain setting, 1x or 2x (default 1x)

    --ramp=         ramp time in seconds
    --hold=         hold time in seconds


Behavior Requirements:

    Want command to ramp up amplitude from zero.  Make a smooth stimulus
    to exciter driving the fiber cantilever.

    When any program stops feeding new values to the SPI interface FIFO,
    the DAC will be left at the last voltage value.
    This may be an abrupt change, and may leave exciter driven.

    Want the output to smoothly ramp down to zero when program terminates.
    Of course this cannot happen if the program is killed.

    Thus the electronics must be arranged so no damage to exciter if it is
    left at a constant DC current.
    We can accept a rough transition as that should not damage anything.

    How does the program know to stop, i.e. ramp down?  Possibly:
    A)  Time delay option.  i.e. run for 5 seconds.
    B)  Send process a signal.
    C)  Gpio input pin could be a signal.
    D)  Check keyboard input.

    Want a status indicator to show ramping or stable state.

    Frequency could be hard to turn into internal parameters.  Maybe start
    with directly specifying internal parameters, and do a frequency
    measurement to make a calibration.

    Want Sync marks to gate LED to see stimulus phase in camera image of
    fiber scan pattern.

Frequency sweep:
    Used when looking for resonant frequency.

    Generally sweep frequency keeping amplitude constant.
    However we seem to see an hysteresis effect where the current response
    depends on the past stimulus.  To avoid this, we can ramp amplitude to
    zero between each frequency point, thus making each point independent of
    past stimulus.

    Possibly arrange an input signal to advance to the next frequency point.

    Experiment cycle could be:
    1) Ramp up to specified frequency and amplitude.
    2) Take picture of fiber response.
    3) Ramp down to zero amplitude.

    This could be done by a single-point program that ramps up, waits
    5 seconds for picture, then ramps down and exits.
    Or any of the ramp up/down signal methods.

    Possibly the program could trigger camera thru Gpio.
    This can work, but leads to program inversion.

    I favor having a separate high-level program doing the orchestrating
    of a camera program and the sine DAC program.

Frequency Parameters:
    Ideally frequency specified in Hz, and delays is seconds.

    Internal frequency is really the SPI Speed_12 parameter, and the numeric
    oscillator stride and wave table size.

    Internally delay by counting cycles.

Not Real-time OS:
    The RPi is running generic Linux, and is NOT real-time responsive.
    The main issue is any process can (and will) be put in a sleep state
    at any time.
    However it is easy to arrange for a single process to run with minimal
    disturbance.

    Summary:  We want the RPi running the DAC to pretty much be that one
    process running 100% CPU, with minimal other things.
    Thus put the camera on another RPi.

SPI Interface:  (rgUniSpi)

    SCLK frequency changes with ARM core frequency.
    Thus need a process "warmup" period to kick the OS to raise ARM frequency.
    Keeping high CPU usage will keep the frequency constant (i.e. not go into
    power saving), unless over temperature causes throttling.

    It may be tricky to keep a constant sample rate, but I think it is just
    possible.

Conversion Factors:  Gain, Stride
    Convert user units, mVpp and Hz, into internal factors of Gain and Stride.

    Conversion is based on a particular configuration of DAC, amplifiers,
    SPI sample rate, wave table size, etc.
    Ultimately the program could compute the conversion factors, but start
    with externally computed factors.

    Gain_mVpp  = Gain per mVpp
    Stride_Hz  = Stride per Hz

----------------------------------------------------------------------------
## Frequency Calculation
----------------------------------------------------------------------------

    Nsize  = Number of entries used in table
    Stride = Stride stepping thru wave table

    Tsamp  = sample period, generally a given
		Is the period from one CS to another.
    Tcyc   = oscillator cycle period (one output sine wave cycle)

    Fsamp  = 1 / Tsamp		= sample frequency
    Fcyc   = 1 / Tcyc		= oscillator frequency

    (1)  AnSamp  = Nsize / Stride	= average number of samples in a cycle


    (2)  Tcyc = AnSamp * Tsamp

    (3)      Tcyc = Tsamp * Nsize / Stride

    (4)      Fcyc = Stride / (Tsamp * Nsize)


    (5)  Stride = Fcyc * Tsamp * Nsize

	 Stride = (Fcyc / Fsamp) * Nsize

    Want program to calculate frequency Fcyc, given a sample period Tsamp.
    Want program to compute Stride, given Fcyc.
    Possibly program could read Speed_12 to calculate Tsamp.

    (6)  Stride_Hz = Stride / Fcyc	Stride per Hz, Fcyc in Hz

	 Stride_Hz = Tsamp * Nsize	Tsamp in seconds

    Idea is to calculate Stride given user-centric Fcyc:

    (7)  Stride = Fcyc * Stride_Hz

	#!! The name Stride_Hz is a bit confusing.  StrideCyc  StridePerHz ?
	    StridePer_Hz_
	    GainPer_mVpp_
	Trailing underscore indicates 1/unit.

SPI Frequency:  (rgUniSpi)

    From:  dac_adc/code/doc/uspi_period.text
	--Speed_12		- Sets the SCLK clock frequency.
    (8)  Fsclk = Fsys / (2 * (Speed_12 + 1))		- SCLK frequency

	 Tsclk = 1 / Fsclk		SLCK period definition

    (9)  Tsclk = 2 * (Speed_12 + 1) / Fsys

	On a RPi4:
	Fsys = 200 MHz  for  Farm =  600 MHz  idle
	Fsys = 500 MHz  for  Farm = 1500 MHz  full speed

    ShiftLength_6 = number of data bits shifted out in a SPI (CS) cycle.

    Nsclk = ShiftLength_6 + 2.5      = number of sclk periods in a SPI cycle

    Tsamp = Tsclk * Nsclk	= sample period (one SPI CS cycle).

    Thus to find Speed_12 for a given Tsamp:

	Tsclk = Tsamp / Nsclk

	Speed_12 = ((Tsclk * Fsys) / 2) - 1		from (9)
	Speed_12 = ((Tsamp * Fsys / Nsclk) / 2) - 1

    Example:
	Tsamp = 50 us,  for 20 kSPS desired sample rate
	ShiftLength_6 = 16
	Fsys = 500 MHz

	Nsclk = 16 + 2.5  = 18.5
	Tsclk = 50 us / 18.5  = 2.70 us
	Speed_12 = ((2.70 us * 500 MHz) / 2) - 1  = 674.7

	Speed_12 = 640.03,  for ShiftLength_6 = 17

Frequency option:  --freq=F

    Assume Tsamp is known or found from reading rgUniSpi.

	ShiftLength_6 = 17,	read from rgUniSpi
	Speed_12      = 640,	read from rgUniSpi
	Fsys          = 500 MHz, RPi4
	Nsize         = 128 * 1024 = 131072

	Nsclk = ShiftLength_6 + 2.5
	      = 19.5

	Tsclk = 2 * (Speed_12 + 1) / Fsys	eq (9)
	      = 2.564 us

	Tsamp = Tsclk * Nsclk
	      = 50.00 us

	StridePer_Hz_ = Tsamp * Nsize
		      = 6.554 s

	Stride = StridePer_Hz_ * Fcyc		eq (7)

Frequency Resolution:

    Intuitively a larger wave table (larger Nsize) will give a finer
    frequency resolution.  How to express this?

    The fractional component of Stride seems to give arbitrarily fine
    resolution, but not really.  The fractional part only contributes when
    it accumulates enough to add an integer step.

    What we mean is frequency resolution is the step change in frequency for
    an integer unit step in Stride.  i.e.  F(x) is frequency at Stride x:

	DeltaFcyc = F( Stride + 1 ) - F( Stride )

    From eq (4)

	DeltaFcyc = ( (Stride + 1 ) - Stride ) / (Tsamp * Nsize)

	DeltaFcyc = 1 / (Tsamp * Nsize)

	DeltaFcyc = Fsamp / Nsize

    Thus frequency resolution is proportional to (1/Nsize), which makes sense.
    Note it is independent of the output frequency Fcyc.

    As a fraction of Fcyc, define frequency resolution Fres:

	Fres == DeltaFcyc / Fcyc

	    Fres = 1 / Stride
	    Fres = 1 / (Fcyc * Tsamp * Nsize)
	    Fres = ( Fsamp / Fcyc ) / Nsize

	Thus one part in Stride is the frequency resolution, which is kind-of
	the original definition.
	For fine resolution make Stride big, and thus Nsize big.

    Example:
	Fsamp = 20 kHz
	Nsize = 100000
	Fcyc  = 200 Hz

	    DeltaFcyc = 20 kHz / 100000         = 0.2 Hz

	    Stride    = (Fcyc / Fsamp) * Nsize  = 1000

	    Fres      = 1 / 1000

Frequency Measurement:

    The program can count cycles, and measure the elapsed time with
    clock_gettime().  Thus can measure period and frequency.
    Use this as a measured result.

----------------------------------------------------------------------------
## Amplitude (Gain) Calculation
----------------------------------------------------------------------------

Circuit:  avolt_dac_v1  v1.0

    Amplitude is mostly circuit dependent.
    DAC -> Amp Vo=(2*0.512V - Vi) -> Attenuator 4:1 -> Buffer

    Here we use the MCP4822 DAC in a +-1.0240 V Full Scale (FS) output mode
    provided by an inverting op-amp filter with offset (output Vfa).
    For a 12-bit DAC, LSB is 0.0005 V and the conversion equation is:

	Vfa = -0.0005 V * (Code - 2048)		offset output, filtered

	Code = (Vfa / 0.0005 V) + 2048		DAC digital code number

    The signal is then attenuated 4:1 and buffered:

	Voa = Vfa * 0.250			final output
	    = 0.125 mV * (Code - 2048)

	Code	Vfa		Voa (mV)
	----	----------	--------
	4095	-1.0235 V	-255.9
	4048	-1.0000 V	-250.0
	2048	 0.0000 V	   0.0
	  48	+1.0000 V	+250.0
	   0	+1.0240 V	+256.0

Conversion Factor:  Gain_mVpp

    We define Gain_mVpp such that:

	Gain = Gain_mVpp * User_mVpp	= Gain parameter

	User_mVpp       = user input, in mVpp, range -256 to +255

	Gain is the scale factor used in dNcScaler::set_Gain(), and is
	a Q14.0 value with range [-MaskFS to MaskFS].
	In this particular case (MCP4822 DAC in program sine_mcp4822.cpp)
	Gain is in the range [-2047 .. +2047].
	#!! should it be [-2048 .. +2048]?

	Essentially the wave table entry Q2.30 value in range [-1.0 to +1.0]
	is multiplied by (Gain / 2048).

    Thus

	Gain_mVpp = Gain / User_mVpp

	So for overall conversion we want  User_mVpp= 250.0  to produce
	Gain= 2000, and thus  Gain_mVpp= 8.000 .
	Just applying nominal range from the table, not the absolute max
	range, to keep numbers simple.  i.e. Use full scale code +-2000
	instead of the binary +-2048, leaving a little bit of headroom.

----------------------------------------------------------------------------
## Sync Marks
----------------------------------------------------------------------------

    Sync Marks are digital output signals aligned with interesting points
    of the output waveform.

    For the Fiber Scanner we want to see the phase of the drive signal and
    the direction the ellipse is traced in the camera image.

Jitter in the Sync Mark:
    Jitter is intrinsic, with magnitude equal to the sample period Tsamp.
    It can be reduced by increasing the number of samples per cycle.

	Tsamp = Tcyc * Stride / Nsize		Jitter in seconds, is the
						    sample period

	(Tsamp / Tcyc) = Stride / Nsize		Jitter as fraction of a cycle
		       = 1 / AnSamp

    Jitter is zero when Stride is an integer factor of the table size Nsize.
    In that case the same set of table indices are selected each cycle.
    Stride itself need not be an integer.  (e.g. 2.5 * 100 = 250)
    i.e.

	Stride * M = Nsize		Zero jitter, where M= integer

	Nsize / Stride = M   = AnSamp	which is number of samples per cycle

    Apply the frequency calculation equations above to find conditions for
    zero jitter in terms of controllable parameters Nsize and Tsamp.

	Tcyc = AnSamp * Tsamp			eq (2)

	Tsamp = Tsclk * Nsclk			sample period definition

	Tsclk = 2 * (Speed_12 + 1) / Fsys	eq (9)

    thus the cycle period is

	Tcyc = AnSamp * Nsclk * 2 * (Speed_12 + 1) / Fsys

    where, for zero jitter, AnSamp = (Nsize / Stride) is an integer.
    So Tcyc is proportional to the product of 3 integers that we can choose,
    within constraints, and perhaps can give reasonable frequency resolution.

    Table size and stride must be an integer ratio for zero jitter, and thus
    cannot be used for fine frequency resolution of the sync marks, unlike
    the situation without sync marks where they are a great frequency control
    mechanism.

    Example:  (Zero jitter configuration)
	Fcyc = 500 Hz,  Tcyc = 2 ms,  ShiftLength_6 = 17
	Nsize    = 131072  = 128 K
	Fsys     = 500 MHz,  Tsys = 2 ns
	Speed_12 = 640
	Nsclk    = 19.5
	Stride   = StridePer_Hz_ * Fcyc = (6.554 s) * (500 Hz) = 3277
	AnSamp   = 131072 / 3277 = 40		integer for zero jitter

					2 * Tsys = 4 ns
	AnSamp	Nsclk	Speed_12+1	Tcyc		Fcyc
	------	-----	----------	---------	---------
	40	19.5	641		1.9999 ms	500.02 Hz

	41	19.5	641		2.0499 ms	487.82 Hz
	40	20.5	641		2.1025 ms	475.63 Hz
	40	19.5	642		2.0030 ms	499.24 Hz

	39	19.5	641		1.9499 ms	512.84 Hz
	39	19.5	642		1.9530 ms	512.04 Hz
	39	19.5	643		1.9560 ms	511.25 Hz

	Note delta 1 on each parameter has an effect proportional to the
	size of the parameter.  Thus Speed_12 has the finest resolution,
	about 0.8 Hz per step, and a step size percentage of
	    1/Speed_12 = 1/641 = 0.156%
	Normal jitter from Stride is
	    1/AnSamp   = 1/40  = 2.50 %

	The idea would be to increment Speed_12 for fine control, then
	step AnSamp to keep both in a reasonable range.
	Speed_12 effects Tsamp, which has an upper limit from FIFO underflow.
	AnSamp has a lower limit of not enough samples per cycle.
	Nsclk is mostly fixed by number of bits shifted, but we could add
	throw-away bits.

	There is not much opportunity to change factors in opposite directions
	to get a finer step because they differ by factors of 2 to 16.

Stored Sync Marks:
    The sync mark bits can be stored in the low order bits of the wave table
    entries, which are discarded in the actual waveform.  Essentially it
    is a binary waveform issued along with the analog sine wave.  This was
    the original idea.

    An arbitrary binary wave form can be stored, and is fairly easy to issue.
    However the position of the edges is not easily changed on the fly, i.e.
    must re-write the table.

    A stored sync mark must be at least as wide (the number of entries) as
    Stride to ensure that it is hit at least once per cycle.  Generally
    round Stride up to the next integer.  Note that in some cases a minimal
    width mark may result in one or two samples, resulting in width jitter
    in addition to position jitter.

Computed Sync Marks:
    The sync mark edges could be computed based on the wave table index
    currently being issued, essentially the accumulated Stride.
    e.g.

	if ( (Index > EdgePose) && (Index < (EdgePose + Stride)) ) {
	    Output sync mark pulse (one sample).
	}

    This is easy to dynamically change, but mostly appropriate for just a
    few edges.  The same width and jitter issues occur.

Class dNcOsc Sync Marks:
    Use another dNcOsc object just for issuing the stored sync marks.  It has
    a separate accumulated phase attribute which can be adjusted to position
    the stored sync mark pattern relative to the sine wave.
    Essentially combines the stored sync marks with a computed phase position.

    Extend the idea to use multiple objects for multiple sync marks.

LED Gate:
    Can have multiple sync marks.  Possibly externally choose which one to
    apply to the LED gate.

    A sync mark that is half the sine wave works well to mark the zero
    crossings of the sine wave.  Half the ellipse is in darkness, making
    it a bit harder to see the full extent.

    Sync marks that disable the LED for only one sample at each zero crossing
    would allow the full ellipse to be seen.

    The direction of the ellipse tracing cannot be determined if the sync
    marks have symmetry on the sine wave cycle, the pattern is the same
    whether time progresses forward or backward.  e.g. Equal width pulses
    at the drive zero crossings.

    Introduce asymmetry by making one pulse wider, or by adding a third pulse
    unequally spaced between the first two.

    The best time resolution is near the center of the ellipse pattern, where
    the trace is moving fastest.  The trace is moving slower at the tips of
    the ellipse.
    Thus is may be desirable to position the sync marks at the center of
    the ellipse, or at the axis crossings, and read out the resulting
    phase delay.

    The axis crossings of the ellipse pattern are the X and Y sinusoid
    zero-crossings of the response waveform.
    This is the phase delay of the response from the drive.

    The maximum X and Y displacements are the response amplitudes.
    This is essentially the bounding box of the ellipse (for which we already
    have program pgm_box).

----------------------------------------------------------------------------
## Ramp Gain up/down
----------------------------------------------------------------------------

    Idea is to ramp Gain up from zero at beginning, and back down to zero
    at the end to avoid step transients.
    Gain is changed only near the zero crossing to minimize step change.

    Ramp duration is a counted number of waveform (sinusoid) cycles.
    A gain increment (gain_inc) is added to the Gain each cycle during
    the ramp.  The sign determines the direction of the ramp (up or down).

    Use a linear ramp.  Is probably good enough, and fairly simple.
    Could use the dNcOsc class to make a sinusoidal ramp, which would
    be very smooth (i.e. have a continuous derivative).

    Gain in dNcScaler class is an integer.

    Perhaps the gain step can be fixed point, e.g. Q20.12, which could
    give fractional step resolution useful for small gain steps.

    Want fairly efficient execution since it is in the inner loop.
    Although ... 50 us per sample (20 kSPS) is pretty long.

    In general the final gain will not be divisible by an integer number
    of cycles.  Ways to handle:
    A) Use fixed point with enough precision.
 >  B) Last ramp step could be smaller to exactly hit final gain.  Clamp.
    C) Approximate final gain, not exact.
    D) Let GainInc = 1, and accept up to 2048 steps.  Too slow.

    Possibly incorporate gain ramp into dNcScaler class.

Three phases of ramp:
    1) Ramp up.
    2) Hold steady.
    3) Ramp down.

Algorithm concept:  (rough ideas)

    FinalGain   = 1024;
    DesiredRamp = 100;		// estimate of number of cycles desired

    gain_inc = FinalGain / DesiredRamp;		// integer division
    ramp_cnt = FinalGain / gain_inc;		// ramp number of cycles
		// trying to count cycles during ramp

    while (inner loop)	// (B) Clamp at final gain
    {
	if ( (new cycle) && ramp_cnt ) {
	    ramp_cnt--;
	    Gain = Gain + gain_inc;
	    if ( Gain >= FinalGain ) { Gain=FinalGain;  ramp_cnt = 0; }
	    if ( Gain <= 0         ) { Gain=0;          ramp_cnt = 0;  break; }
	}
	...
    }

    Change the sign of gain_inc to ramp down.

    The "break" could exit the loop after ramp-down.

    The ramp_cnt could be a boolean flag, since it is forced to zero when
    the Gain value is clamped.

    Put this into Q20.12 fixed-point arithmetic.

Refine Code:  (Q20.12 fixed-point arithmetic)

    int32_t		hold_cnt        = Opx.ncyc.Val;
    bool		ramp_flag       = 1;
    int32_t		ramp_cnt        = 0;
    int32_t		final_gain_Qd12 = Opx.gain.Val << 12;
    int32_t		gain_step_Qd12  = final_gain_Qd12 / Opx.nramp.Val;
    int32_t		gain_Qd12       = Sox.get_Gain() << 12;

    while ( hold_cnt || ramp_flag )	// inner loop
    {
	if ( (new cycle) && ramp_flag ) {	// in the ramp
	    ramp_cnt++;
	    gain_Qd12 += gain_step_Qd12;

	    if ( gain_Qd12 >= final_gain_Qd12 ) {	// clamp final
		gain_Qd12 = final_gain_Qd12;
		ramp_flag = 0;
	    }
	    if ( gain_Qd12 <= 0 ) {			// clamp zero
		gain_Qd12 = 0;
		ramp_flag = 0;
	    }

	    Sox.set_Gain( gain_Qd12 >> 12 );
	}
	else if (new cycle) {			// in the hold period
	    hold_cnt--;
	    if ( hold_cnt <= 0 ) {
		ramp_flag = 1;
		gain_step_Qd12 = - gain_step_Qd12;
	    }
	}
	...
    }

    This makes a little state machine inside the main loop to ramp up, hold,
    and ramp down.

    Implimented prototype code in sine_mcp4822 program.  Seems to work, but
    is hard to test, with quite a lot of complexity and things that could
    go wrong.

Ramp Class:  (dNcRamp)

    Implement the gain ramping as a class derived from dNcScaler.

    Function to evolve one ramp step:
    ramp_step()
    {
	switch (state) {
	case 3:		// ramp up
	    gain_Qd12 += gain_step_Qd12;
	    if ( gain_Qd12 >= final_gain_Qd12 ) {	// clamp final
		gain_Qd12 = final_gain_Qd12;
		state = 2;
	    }
	    break;
	case 2:		// hold
	    hold_cnt--;
	    if ( hold_cnt <= 0 ) {
		state = 1;
	    }
	    break;
	case 1:		// ramp down
	    gain_Qd12 -= gain_step_Qd12;
	    if ( gain_Qd12 <= 0 ) {			// clamp zero
		gain_Qd12 = 0;
		state = 0;
	    }
	    break;
	}

	set_Gain( gain_Qd12 >> 12 );
	return  state;		// 0 when done
    }

    while ( notdone )	// inner loop
    {
	if (new cycle) {
	    notdone = ramp_step();
	}
	...
    }

    This algorithm works only for positive gain, simpler to start.

----------------------------------------------------------------------------
## Current Implementation
----------------------------------------------------------------------------

Describe what and how the current program works.


----------------------------------------------------------------------------
## sine_mcp4822 turn-on  2022-04-06
----------------------------------------------------------------------------

Configuration:
    RPi4:  rpiFour
    Circuit:  avolt_dac_v1/  v1.0
    Code:  sine_mcp4822.cpp  (commit 2a2d164ace)

Observations:

    Low pass filter working.  Produces a phase delay.

    Noise on output.
    Digital noise ~120 mVpp on Voa (final output).  This goes away
    when SPI stops clocking, i.e. CE2n goes high.

    % ../bin/sine_mcp4822 --gain=200 --stride=4.0 --nsamp=10000
	stride=4.0 --nsamp=10000
	Wtab.Nsize = 128
	Sox.Gain   = 200
	Sox.Offset = 2048
	Nox.Stride = 4.0000
	Nox.Phase  = 0.0000
	NperCycle  = 32.0000
	    loop_cnt=     5193819
	    fifo_cnt=     10000      55742 ns/fifo_write
	    overflow_cnt= 2
	    delta_ns=  557427296 ns,   107 ns/loop
	Fsamp =    17939.8 Hz
	Fcyc  =      560.6 Hz

    Vda (DAC) output:  200 mVpp sine wave.  Can see steps on each sample.

    Vfa filter output:  Looks clean, except for SCLK noise.
	The filter works!  But adds phase delay.

    Repeated runs can usually capture the ending cycle, with an even
    stride that ends on a zero crossing.  Can see the digital noise stop
    when oscillator stops.  Can see DAC steps on DAC output, gone on filter
    output.  Can see phase delay between DAC and Filter (in addition to the
    inverting filter output).  Very nice.

    Measured Fcyc ~625 Hz on oscilloscope, program measured Fcyc= 617 Hz.
    Amplitude is also close.

    % rgpio uspi -1
    Spi1:
       1.AuxEn    = 0x00000002
       1.Cntl0    = 0x2a300850
       1.Cntl1    = 0x00000000
       1.Stat     = 0x00400300
       1.Peek     = 0x00000000
       1.SpiEnable_1    = 1
       1.SpiIrq_1       = 0
     Cntl0
       1.Speed_12       = 675
       1.ChipSelects_3  = 0
       1.PostInMode_1   = 0
       1.VariableCs_1   = 0
       1.VariableWidth_1= 0
       1.DoutHoldTime_2 = 0
       1.EnableSerial_1 = 1
       1.InRising_1     = 0
       1.ClearFifos_1   = 0
       1.OutRising_1    = 0
       1.InvertClk_1    = 0
       1.OutMsbFirst_1  = 1
       1.ShiftLength_6  = 16
     Cntl1
       1.CsHighTime_3   = 0
       1.TxEmptyIrq_1   = 0
       1.DoneIrq_1      = 0
       1.InMsbFirst_1   = 0
       1.KeepInput_1    = 0
     Status
       1.TxLevel_3      = 0
       1.RxLevel_3      = 4
       1.TxFull_1       = 0
       1.TxEmpty_1      = 1
       1.RxFull_1       = 1
       1.RxEmpty_1      = 0
       1.Busy_1         = 0
       1.BitCount_6     = 0

Need:
 v  Measure Fsamp and Fcyc.

 v  Change sample_cnt to be the number of SPI cycles.

 v  Add a warmup period.
	This eliminated SCLK (Arm core) frequency change and made the frequency
	measurement more accurate.

 v  Add initial fill of Fifo.  Are getting overflow_cnt= 2.
	This eliminated the initial overflow counts.

 v  Add sync marks to program.

    Need trigger output for scope.  Perhaps near start or stop.

----------------------------------------------------------------------------
## Experiment:  sine_mcp4822 with LED Gate  2022-04-23
----------------------------------------------------------------------------

Configuration:
    Continued from above.
    Code:  sine_mcp4822.cpp  (commit  87807a0edd)  2022-04-23  includes:
	Expanded wave table to 128*1024 entries.
	Added LED gate sync marks at 0, 1/2, and 1/8 cycle.
    Fiber:  FiberTronics SM 9 um core, ST/UPC connector.
	Canilever length:  13.5 mm
	Ferrule:  2.5 mm dia ceramic, free fiber (not glued)
    Exciter:  PUI Audio ASX04008-R
	Mounted on thick fender washer on micrometer stage.
    Microscope:  Lens at 1x magnification.
    RPi:  rpiTouch with HQ Camera
    RPi:  rpiFour  driving rgUniSpi circuit
    Circuit:  avolt_dac_v1/  v1.0  (same as above)

Initialize and run:
    % bin/sine_mcp4822.init
    % rgpio fsel --mode=Alt4  16 17 18 19 20 21
    % bin/sine_mcp4822 --stride=1024 --gain=400 --nsamp=10000
	Wtab.Nsize = 131072
	Sox.Gain   = 400
	Sox.Offset = 2048
	Nox.Stride = 1024.0000
	Nox.Phase  = 0.0000
	NperCycle  = 128.0000
	nsize   = 131072
	istride = 1025
	    loop_cnt=     5453930
	    fifo_cnt=     10000      52727 ns/fifo_write
	    overflow_cnt= 0
	    delta_ns=  527277037 ns,    96 ns/loop
	Fsamp =    18965.6 Hz
	Fcyc  =      148.2 Hz

    Fixed  sine_mcp4822.init  to set --ShiftLength_6=17  (not committed).
	rgpio uspi -1 --SpiEnable_1=1
	rgpio uspi -1 --Speed_12=675 --EnableSerial_1=1 --ShiftLength_6=17
	rgpio uspi -1 --OutMsbFirst_1=1  --ChipSelects_3=0

    Sync marks are working on Gate output:
	Are normally low, pulse high for one sample.

    Sine wave output Voa still has lots of digital noise while DAC is clocked.

Try simple Amplitude calibration:
    Scope trigger on Gate output.
    Ch1 is sine wave output, BandWidth limit ON (reduce digital noise some).
    Ch1 50 mV/div
    Measure with cursors.
    % bin/sine_mcp4822 --stride=1024 --gain=100 --nsamp=10000

      Gain       Output            mVpp/Gain
    --gain=100   Voa=  25.75 mVpp   0.2575
    --gain=200   Voa=  49.25 mVpp   0.2463
    --gain=400   Voa=  98.25 mVpp   0.2456
    --gain=50    Voa=  11.75 mVpp   0.2350
    --gain=300   Voa=  74.25 mVpp   0.2475
    --gain=500   Voa= 123.00 mVpp   0.2460
    --gain=1000  Voa= 246.25 mVpp   0.2462
    --gain=2000  Voa= 496.25 mVpp   0.2481

Exciter drive from scope WaveGen:
    Current buffer with 10:1 attenuator on input (91.0 kohm series resistor
	on input, internal 10.0 kohm to ground).
    Output gain is:  100 mA/V
    WaveGen output:  500 mVpp, gives 50 mApp
    Fiber resonance:
	Mode 1:  500.0 to 520.0 Hz max before jump
	Mode 2:  513.0 to 522.8 Hz max before jump
	512 Hz is good spot in Mode1.

Try Gated LED on camera:
    % bin/sine_mcp4822 --stride=3520 --gain=2000 --nsamp=100000
	Wtab.Nsize = 131072
	Sox.Gain   = 2000
	Sox.Offset = 2048
	Nox.Stride = 3520.0000
	Nox.Phase  = 0.0000
	NperCycle  = 37.2364
	nsize   = 131072
	istride = 3521
	    loop_cnt=     55031319
	    fifo_cnt=     100000     52733 ns/fifo_write
	    overflow_cnt= 0
	    delta_ns= 5273337163 ns,    95 ns/loop
	Fsamp =    18963.5 Hz
	Fcyc  =      509.3 Hz

    Measured amplitude:  Voa= 450 mVpp,  45 mApp
    LED gate (darkness) is clearly visible on the ellipse.
    See the three asymmetric marks.  Ellipse is tracing CCW.
    It works!

    Turn-ON/OFF of the signal makes a thump on exciter and transient
    resonance as fiber motion stabilizes.
    Transient may kick it into Mode2.
    Frequency well below Mode2 minimum is needed to see Mode1.

    Sync pulses:  Voa is inverted compared to DAC, thus see on scope:
	pulse 0 is at Voa zero cross falling
	pulse 1 is at 1/8 cycle later
	pulse 2 is at Voa zero cross rising
	Pulses are darkness, LED off.

    Image capture on rpiTouch:
	fiber_scanner/camera/data/ex2022_04_23_sine_mcp4822/
    % raspistill -v -o sine_509Hz_a.jpg

Need:
 v  Way to stop waveform at zero volts output.
	Maybe after --nsamp completes add samples to a zero crossing.
	Ramp down to zero volts.

    Calibrated amplitude output.
 v  Calibrated frequency output.

    Duration of waveform - mostly want continuous while taking picture.
	Maybe have a Halt button.

    Maybe ways to step frequency/amplitude up and down.
	Will need a readout method.
	Rerunning the program may be good enough if it always stops cleanly.

 v  Way to select sync marks for measuring frequency on scope.

 v  Recompute rgUniSpi Speed_12 for 17 bits of data.

    Digital noise on analog signal.  How to avoid?

    Output switch on current buffer.

 v  Avoid transients on exciter stimulating other fiber modes.
	Ramp output up/down.

 v  src/sine_mcp4822.init  is not committed

    Leave LED gate enabled (ON) when stopped.
	Work-around to turn it on, run:  sine_mcp4822 --syncmode=0

----------------------------------------------------------------------------
## Experiment:  sine_mcp4822 with LED Gate  2022-05-14
----------------------------------------------------------------------------

Configuration:
    Same as above.
    Code:  sine_mcp4822.cpp  (commit  4fe4cb29c2)  2022-05-14  includes:
	Ramp gain up/down.  Calibrated --freq=F, --syncmode=M.

    % ../bin/sine_mcp4822 --freq=500 --gain=2000 --ncyc=2000 --nramp=3000 --syncmode=1
    --freq
    Frequency  = 500.0000
    Wtab.Nsize = 131072
    Sox.Gain   = 0
    Sox.Offset = 2048
    Sox.HiGain_Qd12   = 8192000
    Sox.GainStep_Qd12 = 2730
    Sox.RampDuration  = 3000
    Sox.HoldDuration  = 2000
    Nox.Stride = 3277.0000
    Nox.Phase  = 0.0000
    NperCycle  = 39.9976
    nsize   = 131072
    istride = 3278
	cycle_cnt=    8002
	loop_cnt=     170746195
	fifo_cnt=     320022     50003 ns/fifo_write
	overflow_cnt= 0
	delta_ns= 16002319120 ns,    93 ns/loop
    Fsamp =    19998.8 Hz
    Fcyc  =      500.0 Hz

    Ramp works great.  Sync mode works great.

    Observe jitter on the sync mark.  Visible on the ellipse with above
    configuration.  Looks like a slow sweep change of position with jump
    back to start position, i.e. sawtooth ramp.
    Jitter is visible on scope - when triggered on sync mark, the other sync
    marks on scope screen appear to jitter.
    Guess that this is the stride walking over a single sample period.

    An even divisor of Nsize does not seem to jitter.  i.e. --stride=2048

    I was initially bummed to see noticeable jitter, but this is expected
    from the relatively large sample period of 40 samples per cycle giving
    about 2.5% jitter.  (See Sync Marks above)

